/**
 * Theme
 * H1/Title: Open Sans
 * Body: Playfair
 */

// web safe ---------------------------------------
// Tahoma, Arial, Verdana, Georgia, Courier New

$font-sans-serif        : (font-family: #{"Tahoma", "Verdana", sans-serif}, variable: false);
$font-serif             : (font-family: #{"Georgia", serif});
$font-roboto            : (font-family: #{"Roboto", sans-serif});
$font-roboto-slab       : (font-family: #{"'Roboto Slab'", sans-serif});
$font-merriweather      : (font-family: #{"Merriweather", serif});
$font-quattrocento-sans : (font-family: #{"'Quattrocento Sans'", sans-serif});
$font-arial-narrow      : (font-family: #{"'Arial Narrow'", sans-serif});
$font-tahoma            : (font-family: #{"Tahoma", "Verdana", sans-serif});
$font-verdana           : (font-family: #{"Verdana", "Tahoma", sans-serif});

/**
 * weight: 300 - 900
 * italic: yes
 * @see: https://fonts.google.com/specimen/Playfair/tester?query=playfair&stroke=Serif
 */
$font-playfair          : (font-family: #{"Playfair", "Georgia", serif});

/**
 * weight: 400 - 900
 * italic: yes
 * @see: https://fonts.google.com/specimen/Playfair+Display/tester?query=playfair&stroke=Serif
 */
$font-playfair-display  : (font-family: #{"'Playfair Display'", "Georgia", serif});

/**
 * weight: 100 - 900
 * italic: yes
 * @see: https://fonts.google.com/noto/specimen/Noto+Serif/tester?stroke=Serif
 */
$font-noto-serif        : (font-family: #{"'Noto Serif'", "Georgia", serif});
/**
 * weight: 200 - 900
 * italic: yes
 * @see: https://fonts.google.com/specimen/Source+Serif+4/tester?query=source&stroke=Serif
 */
//$font-source-serif        : (font-family: #{"'Source Serif 4'", "Georgia", serif});

$font-georgia             : (font-family: #{"Georgia", serif});

// ------------------------------------------------

/**
 * Get a $key value from a $map, or return $default.
 */
@function val($map, $key, $default) {
  @if map-has-key($map, $key) {
    @return map-get($map, $key);
  } @else {
    @return $default;
  }
}
@function label($map, $label) {
  $bracket-open: "["; $bracket-close: "]";
  @if map-has-key($map, $label) {
    @return "#{$bracket-open}#{map-get($map, $label)}#{$bracket-close}"
  } @else {@return "";}
}

/**
 * $a is the argument data structure.
 */
@mixin x-font($a : ( font: $font-sans-serif, weight: 300, color: #000000, size: 1.0rem,
        line-height: 1.1, style: "normal", debug: true, debug-label: 300 )) {

  $font        : val($a, "font", $font-sans-serif);
  $is-variable : val($font, "variable", false);
  $fam         : val($font, "font-family", sans-serif);
  $style       : val($a, "style", normal);
  $size        : val($a, "size", 1.1rem);
  $weight      : val($a, "weight", normal);
  $line-height : val($a, "line-height", inherit);
  $color       : val($a, "color", inherit);

  $debug       : val($a, "debug", false);
  $debugLabel  : label($a, "debug-label");

  font-family  : $fam;
  font-size    : $size;
  font-weight  : $weight;
  font-style   : $style;

  line-height  : $line-height;
  color        : $color;

  @if $debug == true {
    @debug "#{$debugLabel} Â»ðŸ”¹font-family: #{$fam}";
    @debug "#{$debugLabel} Â»    font-size: #{$size}";
    @debug "#{$debugLabel} Â»  font-weight: #{$weight}";
    @debug "#{$debugLabel} Â»   font-style: #{$style}";
    @debug "#{$debugLabel} Â»        color: #{$color}";
    @debug "#{$debugLabel} Â»  line-height: #{$line-height}";
    @debug "#{$debugLabel} Â»  is-variable: #{$is-variable}";
    @debug "#{$debugLabel} âŽ¯ âŽ¯ âŽ¯ âŽ¯ âŽ¯";
  }
}

/**
 * $weight: 100 to 900
 * $style: normal | italic
 */
@mixin roboto($weight: 300, $style: normal) {
  font-family: map-get($font-roboto, font-family);
  font-weight: $weight;
  font-style: $style;
}

@mixin roboto-slab($weight: 300, $style: normal) {
  font-family: map-get($font-roboto-slab, font-family);
  font-weight: $weight;
  font-style: $style;
}

@mixin merriweather($weight: 700, $style: normal) {
  font-family: map-get($font-merriweather, font-family);
  font-weight: $weight;
  font-style: $style;
}

@mixin quattrocento-sans($weight: bold, $style: normal) {
  font-family: map-get($font-quattrocento-sans, font-family);
  font-weight: $weight;
  font-style: $style;
}

@mixin arial-narrow($weight: 300, $style: normal) {
  font-family: map-get($font-arial-narrow, font-family);
  font-weight: $weight;
  font-style: $style;
}

@mixin playfair($weight: inherit, $style: normal) {
  font-family: map-get($font-playfair, font-family);
  font-weight: $weight;
  font-style: $style;
}

/**
 * $bySize can be a positive or negative incremental value.
 * Use within: section { @include h1-size(0.1rem); }
 */
@mixin h1-size($bySize: 1.0rem) {
  $size : $h1-font-size + $bySize;
  h1 {
    &.title   { font-size : $size; }
    &.titlew  { font-size : $size; }
    &.title2  { font-size : $size; }
    &.title2w { font-size : $size; }
    &.title3  { font-size : $size; }
    &.title3w { font-size : $size; }
  }
}

/**
 * $bySize can be a positive or negative incremental value.
 */
@mixin header-sizes($bySize: 0rem) {
  h2 { font-size: $h2-font-size + $bySize; }
  h3 { font-size: $h3-font-size + $bySize; }
  h4 { font-size: $h4-font-size + $bySize; }
  h5 { font-size: $h5-font-size + $bySize; }
  h6 { font-size: $h6-font-size + $bySize; }
}

/**
 * $bySize can be a positive or negative incremental value.
 * Usage: @include body-font-size(0.2rem);
 */
@mixin body-font-size($bySize: 0rem) {
  $new-size : $body-font-size + $bySize;
  body { font-size : $new-size; }
  div.wrapper {
    p {
      em { font-size : $new-size; }
    }
  }
}
/**
 * $bySize can be a positive or negative incremental value.
 * Usage: @include body-font-size(0.2rem);
 * Use within section { .. } block.
 */
@mixin code-font-size($bySize: 0.1rem) {
  $new-size : $code-font-size + $bySize;
  div.highlight > pre > code { font-size : $new-size; }
}
